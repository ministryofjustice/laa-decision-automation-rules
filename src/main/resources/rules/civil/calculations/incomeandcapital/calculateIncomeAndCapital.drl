package rules.civil.calculations.incomeandcapital
import com.laa.model.MeansInformation;
import com.laa.model.Applicant;
import com.laa.model.EmployedIncome;
import com.laa.model.civil.CivilDecisionReport;
import com.laa.model.civil.enums.PaymentFrequency;
import com.laa.model.civil.CivilCase;
import java.math.RoundingMode;
import java.math.BigDecimal;
import com.laa.model.OtherIncome;
import com.laa.model.civil.enums.IncomeType;
import java.util.Optional;
import com.laa.model.Outgoing;
import com.laa.model.civil.enums.OutgoingType;
import com.laa.model.Dependent;
import com.laa.model.civil.enums.RelationToApplicant;
import com.laa.rule.factcheckers.GenericFactChecker
import java.util.ArrayList;
import com.laa.model.Dependent;
import com.laa.model.BankAccount;
import com.laa.model.enums.AccountType;
import com.laa.model.Property;
import java.math.MathContext;
import com.laa.model.CapitalAssets;
import com.laa.rule.factcheckers.Thresholds


rule "process applicant employed income"
lock-on-active  true
	when
		
		$case : CivilCase( meansInformation.applicant.employedIncomeHistory != null )

		$decision : CivilDecisionReport(employmentIncome == null)
		
	then
		System.out.println(drools.getRule().getName());
		MeansInformation meansInformation = $case.getMeansInformation();
		BigDecimal salaySum = meansInformation.getApplicant().getEmployedIncomeHistory().stream()
			.map(ei -> ei.getPay())
			.reduce(BigDecimal.ZERO, BigDecimal::add);
				
		BigDecimal incomeTaxSum = meansInformation.getApplicant().getEmployedIncomeHistory().stream()
			.map(ei -> ei.getIncomeTax())
			.reduce(BigDecimal.ZERO, BigDecimal::add);
			
		BigDecimal nationalInsuranceSum = meansInformation.getApplicant().getEmployedIncomeHistory().stream()
			.map(ei -> ei.getNationalInsurance())
			.reduce(BigDecimal.ZERO, BigDecimal::add);
			
		BigDecimal averageMonthlySalary = salaySum.divide(new BigDecimal(meansInformation.getApplicant().getEmployedIncomeHistory().size()), RoundingMode.HALF_EVEN);
		BigDecimal averageIncomeTax = incomeTaxSum.divide(new BigDecimal(meansInformation.getApplicant().getEmployedIncomeHistory().size()), RoundingMode.HALF_EVEN);
		BigDecimal averageNationalInsuranceSum = nationalInsuranceSum.divide(new BigDecimal(meansInformation.getApplicant().getEmployedIncomeHistory().size()), RoundingMode.HALF_EVEN);
		
		$decision.setEmploymentIncome(averageMonthlySalary);
		$decision.setPayeAndNi(BigDecimal.ZERO.add(averageIncomeTax).add(averageNationalInsuranceSum));
		$decision.setGrossIncome(Optional.ofNullable($decision.getGrossIncome()).orElse(BigDecimal.ZERO).add($decision.getEmploymentIncome())); 
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).add($decision.getEmploymentIncome()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract($decision.getPayeAndNi()));
				
		update($decision);
end

rule "process partner employed income"
lock-on-active  true
	when
		
	    $case : CivilCase(  meansInformation.partner != null, meansInformation.partner.employedIncomeHistory != null) 
			
		$decision : CivilDecisionReport( partnerEmploymentIncome == null  )
		
	then
		
		System.out.println(drools.getRule().getName());
		MeansInformation meansInformation = $case.getMeansInformation();
		BigDecimal salarySum = meansInformation.getPartner().getEmployedIncomeHistory().stream()
			.map(ei -> ei.getPay())
			.reduce(BigDecimal.ZERO, BigDecimal::add);
			
		BigDecimal incomeTaxSum = meansInformation.getPartner().getEmployedIncomeHistory().stream()
			.map(ei -> ei.getIncomeTax())
			.reduce(BigDecimal.ZERO, BigDecimal::add);
			
		BigDecimal nationalInsuranceSum = meansInformation.getPartner().getEmployedIncomeHistory().stream()
			.map(ei -> ei.getNationalInsurance())
			.reduce(BigDecimal.ZERO, BigDecimal::add);
			
		BigDecimal averageMonthlySalary = salarySum.divide(new BigDecimal(meansInformation.getPartner().getEmployedIncomeHistory().size()), RoundingMode.HALF_EVEN);
		BigDecimal averageNationalInsuranceSum = incomeTaxSum.divide(new BigDecimal(meansInformation.getPartner().getEmployedIncomeHistory().size()), RoundingMode.HALF_EVEN);
		BigDecimal averageIncomeTax = nationalInsuranceSum.divide(new BigDecimal(meansInformation.getPartner().getEmployedIncomeHistory().size()), RoundingMode.HALF_EVEN);
		
		$decision.setPartnerEmploymentIncome(averageMonthlySalary);
		$decision.setPartnerPayeAndNi(BigDecimal.ZERO.add(averageIncomeTax).add(averageNationalInsuranceSum));
		$decision.setGrossIncome(Optional.ofNullable($decision.getGrossIncome()).orElse(BigDecimal.ZERO).add($decision.getPartnerEmploymentIncome()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).add($decision.getPartnerEmploymentIncome()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract($decision.getPartnerPayeAndNi()));
		update($decision);
end

rule "process child benefit"
lock-on-active true
	when
		$decision : CivilDecisionReport(  )
		$case : CivilCase( $otherIncomes :  meansInformation.applicant.otherIncome  )	
  		$benefit : OtherIncome( incomeType == IncomeType.CHILD_BENEFIT ) from $otherIncomes
		
		
	then
			System.out.println(drools.getRule().getName());
		
		$decision.setOtherIncome(Optional.ofNullable($decision.getOtherIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		$decision.setGrossIncome(Optional.ofNullable($decision.getGrossIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		update($decision);
end

rule "process maintenance income"
lock-on-active true
	when
		$decision : CivilDecisionReport(  )
		$case : CivilCase( $otherIncomes :  meansInformation.applicant.otherIncome  )	
  		$maintenance : OtherIncome( incomeType == IncomeType.MAINTENANCE ) from $otherIncomes
		
		
	then
			System.out.println(drools.getRule().getName());
		
		$decision.setOtherIncome(Optional.ofNullable($decision.getOtherIncome()).orElse(BigDecimal.ZERO).add($maintenance.getAmount()));
		$decision.setGrossIncome(Optional.ofNullable($decision.getGrossIncome()).orElse(BigDecimal.ZERO).add($maintenance.getAmount()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).add($maintenance.getAmount()));
		update($decision);
end



rule "process incapacity benefit"
lock-on-active true
	when
		$decision : CivilDecisionReport(  )
		$case : CivilCase( $otherIncomes :  meansInformation.applicant.otherIncome  )	
  		$benefit : OtherIncome( incomeType == IncomeType.INCAPACITY_BENEFIT ) from $otherIncomes
		
		
	then
			System.out.println(drools.getRule().getName());
		

		$decision.setOtherIncome(Optional.ofNullable($decision.getOtherIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		$decision.setGrossIncome(Optional.ofNullable($decision.getGrossIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		update($decision);
end

rule "process miscellaneous income"
lock-on-active true
	when
		$decision : CivilDecisionReport(  )
		$case : CivilCase( $otherIncomes :  meansInformation.applicant.otherIncome  )	
  		$benefit : OtherIncome( incomeType == IncomeType.MISCELLANEOUS ) from $otherIncomes
		
		
	then
			System.out.println(drools.getRule().getName());
		

		$decision.setOtherIncome(Optional.ofNullable($decision.getOtherIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		$decision.setGrossIncome(Optional.ofNullable($decision.getGrossIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).add($benefit.getAmount()));
		update($decision);
end

rule "process child care fees"
lock-on-active 
	when
	
		$case : CivilCase( $outgoings : meansInformation.outgoings   )	
		$childCareFees : Outgoing( outGoingType == OutgoingType.CHILD_CARE_FEES ) from $outgoings 
		$decision : 	CivilDecisionReport(  )
		
	then
		System.out.println(drools.getRule().getName());
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add($childCareFees.getAmount()));
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract($childCareFees.getAmount()));	
		update($decision);
end


rule "process mortgage outgoings"

	when
		not GenericFactChecker(fact  == "Mortgage payments Processed")
		$thresholds : Thresholds(  )
		$case : CivilCase( $outgoings : meansInformation.outgoings   )	
		$mortgage : Outgoing( outGoingType == OutgoingType.MORTGAGE_PAYMENT ) from $outgoings 
		$decision : 	CivilDecisionReport(  )

		
	then
			System.out.println(drools.getRule().getName());
		
		BigDecimal housingBenefit = Optional.ofNullable($case.getMeansInformation().getApplicant().getOtherIncome()).orElse(new ArrayList<OtherIncome>()).stream().filter(oi -> oi.getIncomeType().equals(IncomeType.HOUSING_BENEFIT))
		.findFirst().map(oi -> oi.getAmount()).orElse(BigDecimal.ZERO);
		BigDecimal mortgageAfterBenfitDeducted = $mortgage.getAmount().subtract(housingBenefit);

		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add($thresholds.getMortgageMonthlyCap().min(mortgageAfterBenfitDeducted)));	
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract($thresholds.getMortgageMonthlyCap().min(mortgageAfterBenfitDeducted)));	
		insert( new GenericFactChecker("Mortgage payments Processed"));
		update($decision);
end

rule "process accomodation rental outgoings"

	when
		not GenericFactChecker(fact  == "Rental accomodation Processed")
		$thresholds : Thresholds(  )
		$case : CivilCase( $outgoings : meansInformation.outgoings   )	
		$rental : Outgoing( outGoingType == OutgoingType.RENTAL_ACCOMODATION ) from $outgoings 
		

		$decision : 	CivilDecisionReport(  )

		
	then
			System.out.println(drools.getRule().getName());
			
		BigDecimal housingBenefit = Optional.ofNullable($case.getMeansInformation().getApplicant().getOtherIncome()).orElse(new ArrayList<OtherIncome>()).stream().filter(oi -> oi.getIncomeType().equals(IncomeType.HOUSING_BENEFIT))
		.findFirst().map(oi -> oi.getAmount()).orElse(BigDecimal.ZERO);
		
		BigDecimal rentAfterBenfitDeducted = $rental.getAmount().subtract(housingBenefit);
		

		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add(rentAfterBenfitDeducted));	
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract(rentAfterBenfitDeducted));	
		insert( new GenericFactChecker("Rental accomodation Processed"));
		update($decision);
end

rule "process maintenance expense"
lock-on-active 
	when

		$case : CivilCase( $outgoings : meansInformation.outgoings   )	
		$maintenance : Outgoing( outGoingType == OutgoingType.MAINTENANCE ) from $outgoings 
		$decision : 	CivilDecisionReport(  )
		
	then
			System.out.println(drools.getRule().getName());
		
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add($maintenance.getAmount()));	
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract($maintenance.getAmount()));	
		update($decision);
end

rule "process criminal legal aid expense"
lock-on-active 
	when

		$case : CivilCase( $outgoings : meansInformation.outgoings   )	
		$legalaid : Outgoing( outGoingType == OutgoingType.CRIMINAL_LEGAL_AID ) from $outgoings 
		$decision : 	CivilDecisionReport(  )
		
	then
			System.out.println(drools.getRule().getName());
		
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add($legalaid.getAmount()));	
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract($legalaid.getAmount()));	
		update($decision);
end

rule "deduct employment expense from disposable income"

	when
		$case : CivilCase(   meansInformation.applicant.employedIncomeHistory != null  )
		$decision : 	CivilDecisionReport()
		not GenericFactChecker(fact  == "Employment Expense added")
	then
			System.out.println(drools.getRule().getName());
		BigDecimal employmentExpenses = new BigDecimal("45.00");
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome()).orElse(BigDecimal.ZERO).subtract(employmentExpenses));
		insert( new GenericFactChecker("Employment Expense added"));
		update($decision);
end

rule "process deduct child dependents allowance "
lock-on-active 
	when

		$case : CivilCase($relations :  meansInformation.dependents   )
		$dependents : ArrayList(  )  from collect( Dependent( relationToApplicant ==  RelationToApplicant.CHILD_OF_APPLICANT) from $relations )
		$decision : 	CivilDecisionReport( )
	then
	
				System.out.println(drools.getRule().getName());
				
		ArrayList<Dependent> typeSafeDeps  = (ArrayList<Dependent>)$dependents;

	
		BigDecimal totalDependentsAllowance = typeSafeDeps.stream()
		.map(dep -> new BigDecimal("291.49") )
		.reduce(BigDecimal.ZERO, BigDecimal::add);
									
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome())
								.orElse(BigDecimal.ZERO)
								.subtract(totalDependentsAllowance));
			
end

rule "process deduct partner allowance"
lock-on-active 
	when
		$case : CivilCase($relations :  meansInformation.dependents   )
		$dependents : ArrayList(  )  from collect( Dependent( relationToApplicant ==  RelationToApplicant.PARTNER_OF_APPLICANT) from $relations )
		$decision : 	CivilDecisionReport( )
	then
	
				System.out.println(drools.getRule().getName());
				
		ArrayList<Dependent> typeSafeDeps  = (ArrayList<Dependent>)$dependents;

	
		BigDecimal totalDependentsAllowance = typeSafeDeps.stream()
		.map(dep -> new BigDecimal("181.91") )
		.reduce(BigDecimal.ZERO, BigDecimal::add);
									
		$decision.setDisposableIncome(Optional.ofNullable($decision.getDisposableIncome())
								.orElse(BigDecimal.ZERO)
								.subtract(totalDependentsAllowance));

		
end

rule "process single bank accounts"
lock-on-active 
	when
	
		$case : CivilCase( $allAccounts : meansInformation.bankAccounts  )	
		$singleAccounts : ArrayList(  )  from collect( BankAccount( accountType == AccountType.SINGLE) from $allAccounts )
		$decision : CivilDecisionReport(  )	
	then
		System.out.println(drools.getRule().getName());
		ArrayList<BankAccount> typeSafeBankAccounts = (ArrayList<BankAccount>)$singleAccounts;
		
		BigDecimal totalBalanceFromSingleAccounts = typeSafeBankAccounts.stream().map(bnk -> bnk.getBalance())
									.filter(bal ->  bal.compareTo(BigDecimal.ZERO) >= 0)
									.reduce(BigDecimal.ZERO, BigDecimal::add);
	
		
		$decision.setCapitalAssessment(Optional.ofNullable($decision.getCapitalAssessment()).orElse(BigDecimal.ZERO).add(totalBalanceFromSingleAccounts));
		update($decision);
end


rule "process property  for capital assessment that are not subject to proceedings"
lock-on-active true
	when
	
		$case : CivilCase($allProperties:  meansInformation.properties  )
		$properties : ArrayList(  )  from collect( 	Property(  ) from $allProperties )
		$decision : CivilDecisionReport(  )	
		
	then
		ArrayList<Property> typeSafeProperties = (ArrayList<Property>)$properties;
		for(Property property : typeSafeProperties){
			BigDecimal equityAmount  = property.getMarketValue().subtract(new BigDecimal("100000.00").min(property.getAmountInPrinciple()));
			
			BigDecimal notionalSellingCost = property.getMarketValue().multiply(new BigDecimal("0.03"));
			equityAmount = equityAmount.subtract(notionalSellingCost);
		
			equityAmount = equityAmount.multiply(property.getOwnserhipSharePct()).divide(new BigDecimal("100.00"));
			
			if(property.isMainDwelling()){
				equityAmount = equityAmount.subtract(new BigDecimal("100000.00"));
			}
			if(property.isSubjectToProceedings()){
				equityAmount = equityAmount.subtract(new BigDecimal("100000.00"));
			}
	
			$decision.setCapitalAssessment(Optional.ofNullable($decision.getCapitalAssessment()).orElse(BigDecimal.ZERO).add(BigDecimal.ZERO.max(equityAmount)));
		}

		update($decision);
end


rule "process capital assets financial bequests"
lock-on-active 
	when
		$case : CivilCase( $capitalAssets : meansInformation.applicant.capitalAssets  )
		$bequests : ArrayList(  )  from collect( 	CapitalAssets( assetType == AssetType.FINANCIAL_BEQUEST ) from $capitalAssets )
		$decision : CivilDecisionReport(  )	
	then
		ArrayList<CapitalAssets> bequests  = (ArrayList<CapitalAssets>) $bequests;
		BigDecimal totalBequests = bequests.stream().map(asset -> asset.getAmount())
		.reduce(BigDecimal.ZERO, BigDecimal::add);
		
		$decision.setCapitalAssessment(Optional.ofNullable($decision.getCapitalAssessment()).orElse(BigDecimal.ZERO).add(totalBequests));
		update($decision);
end


